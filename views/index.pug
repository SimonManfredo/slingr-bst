head
  title Binary seach Tree
  style.
    .tree ul {
    padding-top: 20px;
    position: relative;
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    }
    .tree li {
    float: left;
    text-align: center;
    list-style-type: none;
    position: relative;
    padding: 20px 5px 0 5px;
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    }
    .tree li::before,
    .tree li::after {
    content: '';
    position: absolute;
    top: 0;
    right: 50%;
    border-top: 1px solid #ccc;
    width: 50%;
    height: 20px;
    }
    .tree li::after {
    right: auto;
    left: 50%;
    border-left: 1px solid #ccc;
    }
    .tree li:only-child::after,
    .tree li:only-child::before {
    display: none;
    }
    .tree li:only-child {
    padding-top: 0;
    }
    .tree li:first-child::before,
    .tree li:last-child::after {
    border: 0 none;
    }
    .tree li:last-child::before {
    border-right: 1px solid #ccc;
    border-radius: 0 5px 0 0;
    -webkit-border-radius: 0 5px 0 0;
    -moz-border-radius: 0 5px 0 0;
    }
    .tree li:first-child::after {
    border-radius: 5px 0 0 0;
    -webkit-border-radius: 5px 0 0 0;
    -moz-border-radius: 5px 0 0 0;
    }
    .tree ul ul::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    border-left: 1px solid #ccc;
    width: 0;
    height: 20px;
    }
    .tree li div {
    border: 1px solid #ccc;
    padding: 5px 10px;
    text-decoration: none;
    color: #666;
    font-family: arial, verdana, tahoma;
    font-size: 11px;
    display: inline-block;
    border-radius: 5px;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    }
    .tree li div:hover,
    .tree li div:hover+ul li div {
    background: #c8e4f8;
    color: #000;
    border: 1px solid #94a0b4;
    }
    .tree li div:hover+ul li::after,
    .tree li div:hover+ul li::before,
    .tree li div:hover+ul::before,
    .tree li div:hover+ul ul::before {
    border-color: #94a0b4;
    }
  script(src='https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js')
  // Latest compiled and minified CSS
  link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css' integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u' crossorigin='anonymous')
  // Optional theme
  link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css' integrity='sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp' crossorigin='anonymous')
  // Latest compiled and minified JavaScript
  script(src='https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js' integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa' crossorigin='anonymous')
  script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js')
// Responsive navbar
nav.navbar.navbar-expand-lg.navbar-dark.bg-dark
// Page content
.container
  h1 Binary Search Tree
  // Name input
  .form-outline.mb-4
    input#input.form-control(type='text' placeholder='12,11,90,82,7,9')
    label.form-label(for='form4Example1') array of integers (comma separated values)
  // Submit button
  button#create.btn.btn-primary.btn-block.mb-4
    | Create Tree
  button#deepest.btn.btn-primary.btn-block.mb-4(type='button')
    | Obtain Deepest Nodes with their Depth
  button#remove.btn.btn-primary.btn-block.mb-4(type='button')
    | Remove Node
  button#search.btn.btn-primary.btn-block.mb-4(type='button')
    | Search Node
  br
  textarea#response.form-control(rows='3')
  br
  #tree.tree
script.
  $("#remove").bind("click", function () {
  $("#tree").html('');
  var input = $('#input').val();
  $('#input').val(input+',');
  var input_edited = $('#input').val();
  let data_remove = prompt("Node to be remove", "");
  let new_input = input_edited.replace(/\\s/g, '').replace(data_remove + ',', '').replace(/,*$/, '');
  $('#input').val(new_input);
  if (input == '') {
  alert('Input is empty');
  return false;
  }
  let data = `{
  "input": "[`+ input + `]"
  ,
  "data": `+ data_remove + `}`;
  $.ajax({
  type: "POST",
  url: "http://localhost:3000/remove",
  data: data,
  crossOrigin: false,
  contentType: "application/json; charset=utf-8",
  dataType: "json",
  success: function (data) {
  $('#response').html(JSON.stringify(data.Tree));
  },
  failure: function (errMsg) {
  alert(errMsg);
  }
  });
  });
  $("#search").bind("click", function () {
  var input = $('#input').val();
  let data_search = prompt("Node to search", "");
  if (input == '') {
  alert('Input is empty');
  return false;
  }
  let data = `{
  "input": "[`+ input + `]"
  ,
  "data": `+ data_search + `}`;
  $.ajax({
  type: "POST",
  url: "http://localhost:3000/search",
  data: data,
  crossOrigin: false,
  contentType: "application/json; charset=utf-8",
  dataType: "json",
  success: function (data) {
  $('#response').html(JSON.stringify(data.Tree));
  draw(data.Tree);
  },
  failure: function (errMsg) {
  alert(errMsg);
  }
  });
  });
  function draw(data){
  let left = data.left ? data.left.data : 'empty';
  let right = data.right ? data.right.data : 'empty';
  let html = `<h1>Search Node</h1><br><ul>
  <li>
  <div>`+ data.data+`</div>
  <ul>
  <li>
  <div>`+ left+`</div>
  </li>
  <li>
  <div>`+ right+`</div>
  </li>
  </ul>
  </li>
  </ul>`;
  $("#tree").html(html);
  }
  $("#deepest").bind("click", function () {
  $("#tree").html('');
  var input = $('#input').val();
  if (input == '') {
  alert('Input is empty');
  return false;
  }
  let data = `{
  "input": "[`+ input + `]"
  }`;
  $.ajax({
  type: "POST",
  url: "http://localhost:3000/deepest",
  data: data,
  crossOrigin: false,
  contentType: "application/json; charset=utf-8",
  dataType: "json",
  success: function (data) {
  $('#response').html('Deepest: ' + JSON.stringify(data.Deepest) + '\nDepth: ' + JSON.stringify(data.Depth));
  },
  failure: function (errMsg) {
  alert(errMsg);
  }
  });
  });
  $("#create").bind("click", function () {
  $("#tree").html('');
  var input = $('#input').val();
  if (input == '') {
  alert('Input is empty');
  return false;
  }
  let data = `{
  "input": "[`+ input + `]"
  }`;
  $.ajax({
  type: "POST",
  url: "http://localhost:3000/deepest",
  data: data,
  crossOrigin: false,
  contentType: "application/json; charset=utf-8",
  dataType: "json",
  success: function (data) {
  $('#response').html(JSON.stringify(data.Tree));
  },
  failure: function (errMsg) {
  alert(errMsg);
  }
  });
  });
